#---------------------------------# 
#      environment configuration  # 
#---------------------------------# 
version: 0.1.{build}.0
image: Visual Studio 2017
install:
    - ps: docker -v

#---------------------------------# 
#      build configuration        # 
#---------------------------------# 

build: false

#---------------------------------# 
#      test configuration         # 
#---------------------------------# 

test_script:
    - ps: |
        $inventory = Get-Content .\inventory.json | convertfrom-json
        foreach($dockerfile in $inventory)
        {
            docker build -t "$($dockerfile.repo):latest" $dockerfile.path
            if($LASTEXITCODE -ne 0)
            {
                throw "docker build of $($dockerfile.repo):latest failed"
            }
            docker build -t "$($dockerfile.repo):$env:APPVEYOR_BUILD_VERSION" $dockerfile.path
            if($LASTEXITCODE -ne 0)
            {
                throw "docker build of $($dockerfile.repo):<version> failed"
            }
        }
    - ps: |
        $results = Invoke-Pester -PassThru
        foreach($result in $results.TestResult)
        {
            [string] $describeName = $result.Describe -replace '\\', '/'
            [string] $contextName = $result.Context -replace '\\', '/'
            $componentName = '{0}; Context: {1}' -f $describeName, $contextName
            $appVeyorResult = $result.Result
            # Convert any result not know by AppVeyor to an AppVeyor Result
            switch($result.Result)
            {
                'Pending'
                {
                    $appVeyorResult = 'Skipped'
                }
            }
            Add-AppveyorTest `
                -Name $result.Name `
                -Framework NUnit `
                -Filename $componentName `
                -Outcome $appVeyorResult `
                -Duration $result.Time.TotalMilliseconds
        }
        if ($results.FailedCount -gt 0 -or $results.PassedCount -eq 0)
        {
            throw "$($results.FailedCount) tests failed."
        }

#---------------------------------# 
#      deployment configuration   # 
#---------------------------------# 

# scripts to run before deployment 
deploy_script:
    - ps: |
        if($env:docker_user -and $env:docker_password)
        {
            docker login --username $env:docker_user --password $env:docker_password

            $inventory = Get-Content .\inventory.json | convertfrom-json
            foreach($dockerfile in $inventory)
            {
                docker push "$($dockerfile.repo):$env:APPVEYOR_BUILD_VERSION"
                docker push "$($dockerfile.repo):latest"
            }
        }
